=======================
How to use 1-my_list.py
=======================


This module defines a class that inherits a list


Instantiation
=============

MyList can be intantiated with no arguments:

::

>>> MyList = __import__('1-my_list').MyList
>>> my_list = MyList()
>>> type(my_list)
<class '1-my_list.MyList'>

::

>>> print(my_list)
[]

or a single argument

::

>>> my_list = MyList([1, 2, 3])
>>> print(my_list)
[1, 2, 3]

::

>>> my_list = MyList(None)
Traceback (most recent call last):
TypeError: 'NoneType' object is not iterable

::

>>> my_list = MyList([1, 2], [3, 4])
Traceback (most recent call last):
TypeError: list expected at most 1 argument, got 2

::

>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(4)
>>> print(my_list)
[1, 2, 3, 4]

::

>>> my_list[0] = 9
>>> print(my_list)
[9, 2, 3, 4]

::

>>> my_list.remove(9)
>>> print(my_list)
[2, 3, 4]

print_sorted method
===================

MyList implements a single method

::

>>> my_list = MyList()
>>> print(my_list.print_sorted)
<bound method MyList.print_sorted of []>

::

>>> my_list.print_sorted(1)
Traceback (most recent call last):
TypeError: print_sorted() takes 1 positional argument but 2 were given

::

>>> my_list.append(2)
>>> my_list.append(1)
>>> my_list.append(3)
>>> my_list.print_sorted()
[1, 2, 3]

::

>>> print(my_list)
[2, 1, 3]

::

>>> my_list = MyList()
>>> my_list.append("John")
>>> my_list.append("Billy")
>>> my_list.append("Divine")
>>> print(my_list)
['John', 'Billy', 'Divine']

::

>>> my_list.print_sorted()
['Billy', 'Divine', 'John']

::

>>> my_list = MyList()
>>> my_list.print_sorted()
[]

::

>>> my_list = MyList([1, "Betty", 9.0, "Cool"])
>>> my_list.print_sorted()
Traceback (most recent call last):
TypeError: '<' not supported between instances of 'str' and 'int'
